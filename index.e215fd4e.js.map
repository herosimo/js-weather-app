{"mappings":"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","sources":["node_modules/@parcel/transformer-js/node_modules/@swc/helpers/src/_define_property.js","src/index.js","src/Api.js","src/App.js"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","import { App } from \"./App\";\r\nimport { Api } from \"./Api\";\r\n\r\nconst api = new Api();\r\nconst app = new App(api);\r\n","export class Api {\r\n  OWM_API_KEY = \"10de9c34a8e3607e1892740e51edccca\";\r\n  OWM_API_URL = \"http://api.openweathermap.org/\";\r\n\r\n  UN_API_KEY = \"rCmYU-DnVhWNujnJdRl7OHw9R5_OnMbr9whez_VeDqk\";\r\n  UN_API_URL = \"https://api.unsplash.com/\";\r\n\r\n  async callGeocoding(mode, loc) {\r\n    let res, data;\r\n\r\n    switch (mode) {\r\n      case \"direct\":\r\n        res = await fetch(\r\n          `${this.OWM_API_URL}/geo/1.0/direct?q=${loc.city}&limit=5&appid=${this.OWM_API_KEY}`\r\n        );\r\n        data = await res.json();\r\n        break;\r\n\r\n      case \"reverse\":\r\n        res = await fetch(\r\n          `${this.OWM_API_URL}/geo/1.0/reverse?lat=${loc.lat}&lon=${loc.lon}&limit=5&appid=${this.OWM_API_KEY}`\r\n        );\r\n        data = await res.json();\r\n        break;\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  async callOneCall(lat, lon) {\r\n    const res = await fetch(\r\n      `${this.OWM_API_URL}data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=alerts,minutely&units=metric&appid=${this.OWM_API_KEY}`\r\n    );\r\n\r\n    const data = await res.json();\r\n    return data;\r\n  }\r\n\r\n  async callAirPollution(lat, lon) {\r\n    const res = await fetch(\r\n      `${this.OWM_API_URL}data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${this.OWM_API_KEY}`\r\n    );\r\n\r\n    const data = await res.json();\r\n    return data;\r\n  }\r\n\r\n  async searchPhoto(loc) {\r\n    const res = await fetch(\r\n      `${this.UN_API_URL}search/photos?query=${loc}&page=1&per_page=1&order_by=relevant&orientation=landscape&client_id=${this.UN_API_KEY}`\r\n    );\r\n\r\n    const data = await res.json();\r\n    return data;\r\n  }\r\n}\r\n","export class App {\r\n  constructor(api) {\r\n    this.api = api;\r\n\r\n    this.searchIcon = document.querySelector(\".left__top__searchIcon\");\r\n    this.searchForm = document.querySelector(\".search\");\r\n    this.searchLoading = document.querySelector(\".search__loading\");\r\n    this.modal = document.querySelector(\".modal\");\r\n    this.cityList = document.querySelector(\".city-list\");\r\n    this.loadingRoot = document.querySelector(\".loading-root\");\r\n    this.container = document.querySelector(\".container\");\r\n\r\n    // Left screen temperature details\r\n    this.leftScreenTemp = document.querySelector(\".left__bottom__temp span\");\r\n    this.leftScreenTitle = document.querySelector(\".left__bottom__temp h2\");\r\n    this.leftScreenSubtitle = document.querySelector(\".left__bottom__temp p\");\r\n    this.leftScreenFl = document.querySelector(\".left__bottom__fl\");\r\n    this.leftScreenDate = document.querySelector(\".left__bottom__footer__date\");\r\n    this.leftScreenLocation = document.querySelector(\".left__bottom__footer__location\");\r\n\r\n    // Right screen weather details\r\n    this.rightScreenAqi = document.querySelector(\".right__details__aqi\");\r\n    this.rightScreenHumidity = document.querySelector(\".right__details__humidity\");\r\n    this.rightScreenPressure = document.querySelector(\".right__details__pressure\");\r\n    this.rightScreenUvi = document.querySelector(\".right__details__uvi\");\r\n    this.rightScreenClouds = document.querySelector(\".right__details__clouds\");\r\n    this.rightScreenVisibility = document.querySelector(\".right__details__visibility\");\r\n    this.rightScreenWind = document.querySelector(\".right__details__wind\");\r\n    this.rightScreenNextHours = document.querySelector(\".right__nextHours\");\r\n    this.rightScreenNextDays = document.querySelector(\".right__nextDays\");\r\n\r\n    this.toggleHideView(this.searchLoading, true);\r\n    this.toggleHideView(this.cityList, true);\r\n    this.toggleHideView(this.modal, true);\r\n    this.toggleHideView(this.loadingRoot, true);\r\n\r\n    // Call check user location on the first screen\r\n    window.onload = () => this.checkUserLocation();\r\n\r\n    // Event listeners\r\n    this.searchForm.addEventListener(\"submit\", this.onSubmitForm);\r\n    this.searchIcon.addEventListener(\"click\", () => this.toggleHideView(this.modal, false));\r\n    this.modal.addEventListener(\"click\", (e) => {\r\n      if (e.target.matches(\".close\") || !e.target.closest(\".modal__container\")) {\r\n        this.toggleHideView(this.modal, true);\r\n      }\r\n    });\r\n  }\r\n\r\n  /*\r\n   * Helper function to hide an element\r\n   */\r\n  toggleHideView(element, hide) {\r\n    element.classList.toggle(\"hide\", hide);\r\n  }\r\n\r\n  /*\r\n   * Helper function to format time to always have 2 digits value\r\n   */\r\n  formatTime(time) {\r\n    return (\"0\" + time).slice(-2);\r\n  }\r\n\r\n  /*\r\n   * Check user's location with navigator.geolocation\r\n   */\r\n  checkUserLocation() {\r\n    // When user grants access to their location\r\n    const onSuccess = async (data) => {\r\n      let loc = await this.api.callGeocoding(\"reverse\", {\r\n        lat: data.coords.latitude,\r\n        lon: data.coords.longitude,\r\n      });\r\n\r\n      let newData = {\r\n        coords: {\r\n          latitude: data.coords.latitude,\r\n          longitude: data.coords.longitude,\r\n          city: loc[0].name,\r\n          state: loc[0].state,\r\n          country: loc[0].country,\r\n        },\r\n      };\r\n\r\n      this.changeCity(newData);\r\n    };\r\n\r\n    // Default location when user doesn't allow geolocation\r\n    const onFail = () => {\r\n      const defaultData = {\r\n        coords: {\r\n          latitude: \"51.5073219\",\r\n          longitude: \"-0.1276474\",\r\n          city: \"London\",\r\n          state: \"England\",\r\n          country: \"GB\",\r\n        },\r\n      };\r\n\r\n      this.changeCity(defaultData);\r\n    };\r\n\r\n    // Check with geolocation if device supports\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(onSuccess, onFail);\r\n    } else {\r\n      onFail();\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Function to invoke when user chooses a city\r\n   */\r\n  changeCity = async (data) => {\r\n    // Close modal and show loading screen\r\n    this.toggleHideView(this.modal, true);\r\n    this.toggleHideView(this.loadingRoot, false);\r\n\r\n    // Check if data is coming from  user's location or search form\r\n    let lat = data.target?.dataset?.lat || data.coords?.latitude;\r\n    let lon = data.target?.dataset?.lon || data.coords?.longitude;\r\n    let city = data.target?.dataset?.city || data.coords?.city;\r\n    let state = data.target?.dataset?.state || data.coords?.state;\r\n    let country = data.target?.dataset?.country || data.coords?.country;\r\n\r\n    // Call api to OpenWeather\r\n    const oneCallData = await this.api.callOneCall(lat, lon);\r\n    const airPollutionData = await this.api.callAirPollution(lat, lon);\r\n\r\n    // Call api to Unsplash & set background image\r\n    const bgPhoto = await this.api.searchPhoto(state);\r\n    this.container.style.backgroundImage = `linear-gradient(rgba(87, 87, 87, 0.5), rgba(87, 87, 87, 0.5)), url(\"${bgPhoto.results[0].urls.regular}\")`;\r\n\r\n    // Change left screen value\r\n    let date = new Date(oneCallData.current.dt * 1000);\r\n\r\n    this.leftScreenTemp.innerText = `${oneCallData.current.temp}°C`;\r\n    this.leftScreenTitle.innerText = oneCallData.current.weather[0].main;\r\n    this.leftScreenSubtitle.innerText = oneCallData.current.weather[0].description;\r\n    this.leftScreenFl.innerText = `Feels like ${oneCallData.current.feels_like}°C`;\r\n    this.leftScreenDate.innerText = `${this.formatTime(date.getHours())}:${this.formatTime(\r\n      date.getMinutes()\r\n    )} - ${date.toLocaleDateString(\"en-US\", {\r\n      weekday: \"long\",\r\n    })}, ${date.getDate()} ${date.toLocaleDateString(\"en-US\", {\r\n      month: \"long\",\r\n    })} ${date.getFullYear()}`;\r\n    this.leftScreenLocation.innerText = `${city}, ${state}, ${country}`;\r\n\r\n    // Change right screen value\r\n    let visibility = oneCallData.current.visibility / 1000;\r\n    let windSpeed = (oneCallData.current.wind_speed * (60 * 60)) / 1000;\r\n    let airPollutionDataVal = airPollutionData.list[0].main.aqi;\r\n    const airPollutionDataDetails = [\"Good\", \"Fair\", \"Moderate\", \"Poor\", \"Very Poor\"];\r\n\r\n    this.rightScreenAqi.innerText = `${airPollutionDataVal} / ${\r\n      airPollutionDataDetails[airPollutionDataVal - 1]\r\n    }`;\r\n    this.rightScreenHumidity.innerText = `${oneCallData.current.humidity}%`;\r\n    this.rightScreenPressure.innerText = `${oneCallData.current.pressure}hPa`;\r\n    this.rightScreenUvi.innerText = `${oneCallData.current.uvi}`;\r\n    this.rightScreenClouds.innerText = `${oneCallData.current.clouds}%`;\r\n    this.rightScreenVisibility.innerText = `${visibility.toFixed(1)}km`;\r\n    this.rightScreenWind.innerText = `${windSpeed.toFixed(1)}km/h`;\r\n\r\n    // Change right screen value -> next hours\r\n    let nextHourELements = \"\";\r\n    let hourlyData = oneCallData.hourly.slice(0, 18);\r\n\r\n    hourlyData.forEach((data) => {\r\n      let date = new Date(data.dt * 1000);\r\n\r\n      nextHourELements += `\r\n      <li>\r\n        <span>${this.formatTime(date.getHours())}:${this.formatTime(date.getMinutes())}</span>\r\n        <span>${data.weather[0].main} / ${data.temp}°C</span>\r\n      </li>\r\n      `;\r\n    });\r\n\r\n    this.rightScreenNextHours.innerHTML = nextHourELements;\r\n\r\n    // Change right screen value -> next hourdays\r\n    let nextDayELements = \"\";\r\n\r\n    oneCallData.daily.forEach((data) => {\r\n      let date = new Date(data.dt * 1000);\r\n      nextDayELements += `\r\n      <li>\r\n        <span>${date.toLocaleDateString(\"en-US\", {\r\n          weekday: \"long\",\r\n        })}, ${date.getDate()} ${date.toLocaleDateString(\"en-US\", {\r\n        month: \"long\",\r\n      })} ${date.getFullYear()}</span>\r\n        <span>${data.weather[0].main} / ${data.temp.min}°C / ${data.temp.max}°C</span>\r\n      </li>\r\n      `;\r\n    });\r\n\r\n    this.rightScreenNextDays.innerHTML = nextDayELements;\r\n\r\n    // Hide loading screen after operation finished\r\n    this.toggleHideView(this.loadingRoot, true);\r\n  };\r\n\r\n  /*\r\n   * When user searchs a city\r\n   */\r\n  onSubmitForm = async (e) => {\r\n    // Show loading screen\r\n    e.preventDefault();\r\n    this.toggleHideView(this.searchLoading, false);\r\n    this.cityList.firstElementChild.innerHTML = \"\";\r\n\r\n    // Call api to OpenWeather for searching a location\r\n    const locations = await this.api.callGeocoding(\"direct\", { city: e.target[0].value });\r\n\r\n    if (locations.length > 0) {\r\n      // Show location if exist\r\n      let elements = \"\";\r\n\r\n      // Create a list for ul\r\n      locations.forEach((location) => {\r\n        elements += `<li data-lon=\"${location.lon}\" data-lat=\"${location.lat}\" data-city=\"${location.name}\" data-state=\"${location.state}\" data-country=\"${location.country}\" class=\"city\">${location.name}, ${location.state}, ${location.country}</li>`;\r\n      });\r\n      this.cityList.firstElementChild.innerHTML = elements;\r\n\r\n      // Add event listener when user chooses a city\r\n      const cities = document.querySelectorAll(\".city\");\r\n      cities.forEach((city) => city.addEventListener(\"click\", this.changeCity));\r\n\r\n      // Show the list\r\n      this.toggleHideView(this.cityList, false);\r\n    } else {\r\n      // If there is no location\r\n      alert(\"No location can be found!\");\r\n    }\r\n\r\n    // Hide loading screen\r\n    this.toggleHideView(this.searchLoading, true);\r\n  };\r\n}\r\n"],"names":["obj","key","value","Object","defineProperty","enumerable","configurable","writable","$49722555d2b38fa8$var$api","mode","loc","res","data","fetch","this","OWM_API_URL","city","OWM_API_KEY","json","lat","lon","UN_API_URL","UN_API_KEY","toggleHideView","element","hide","classList","toggle","time","slice","changeCity","coords","latitude","longitude","state","country","navigator","geolocation","getCurrentPosition","async","api","callGeocoding","name","newData","onFail","data1","ref","ref1","ref2","ref3","ref4","ref5","ref6","ref7","ref8","ref9","ref10","ref11","ref12","ref13","ref14","modal","loadingRoot","target","dataset","oneCallData","callOneCall","airPollutionData","callAirPollution","bgPhoto","searchPhoto","container","style","backgroundImage","results","urls","regular","date1","Date","current","dt","leftScreenTemp","innerText","temp","leftScreenTitle","weather","main","leftScreenSubtitle","description","leftScreenFl","feels_like","leftScreenDate","formatTime","getHours","getMinutes","toLocaleDateString","weekday","getDate","month","getFullYear","leftScreenLocation","visibility","windSpeed","wind_speed","airPollutionDataVal","list","aqi","rightScreenAqi","rightScreenHumidity","humidity","rightScreenPressure","pressure","rightScreenUvi","uvi","rightScreenClouds","clouds","rightScreenWind","toFixed","hourly","forEach","date","nextHourELements","innerHTML","daily","max","rightScreenNextDays","nextDayELements","e","searchLoading","firstElementChild","locations","length","elements","location","cityList","document","querySelectorAll","addEventListener","alert","searchIcon","querySelector","searchForm","rightScreenNextHours"],"version":3,"file":"index.e215fd4e.js.map"}